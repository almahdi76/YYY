exo 5
git merge escaped
 HEAD
     |
chase-branch        escaped
     |                 |
     A <----- B <----- C

Further info
Because the chase branch was direct ancestor of the escaped branch, the pointer could be simply moved and no merge commit is necessary (also, conflicts are impossible to happen in such situations).

This is what Git calls as Fast-Forward merge because the branch pointer is only fast forwarded to the commit you are merging with.

Note that you could easily fool this task by executing command

git push origin escaped:chase-branch
Remote repository could not tell then if you have done the merge or if you just wanted to set the remote chase-branch to point to the same commit as your local escaped branch (which is what the command above does).

exo 6

exo 7
git stash
# fix a bug
git commit -am "Fix a bug"
git stash pop
echo "Finally, finished it!" >> bug.txt
git commit -am "Finish my work"

EXO9
git rm ignored.txt
git commit -am "Remove the file that should have been ignored"

When file is ignored but is tracked for whatever reason, you can always execute git rm <file> to remove the file from both repository and working area.

If you want to leave it in your working directory (which is often when dealing with mistakenly tracked files), you can tell Git to remove it only from repository but not from working area with

git rm --cached <file>
